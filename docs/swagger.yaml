basePath: /
definitions:
  handlers.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: Invalid request
        type: string
    type: object
  models.APIError:
    properties:
      message:
        type: string
    type: object
  models.MarketMetadata:
    properties:
      description:
        type: string
      keywords:
        type: string
      market:
        type: string
      title:
        type: string
    required:
    - market
    - title
    type: object
  models.Price:
    properties:
      amount:
        minimum: 0
        type: number
      currency:
        type: string
    required:
    - amount
    - currency
    type: object
  models.Product:
    properties:
      base_title:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      last_hash:
        description: Hash of last known state
        type: string
      metadata:
        items:
          $ref: '#/definitions/models.MarketMetadata'
        type: array
      prices:
        items:
          $ref: '#/definitions/models.Price'
        type: array
      sku:
        type: string
      updated_at:
        type: string
      variants:
        items:
          $ref: '#/definitions/models.Variant'
        type: array
      version:
        description: Version number for optimistic locking
        type: integer
    required:
    - base_title
    - id
    - metadata
    - prices
    - sku
    type: object
  models.Stock:
    properties:
      location_id:
        type: string
      quantity:
        minimum: 0
        type: integer
    required:
    - location_id
    type: object
  models.Variant:
    properties:
      attributes:
        additionalProperties:
          type: string
        description: 'e.g. {"size": "XL", "color": "blue"}'
        type: object
      id:
        type: string
      sku:
        type: string
      stock:
        items:
          $ref: '#/definitions/models.Stock'
        type: array
    required:
    - attributes
    - id
    - sku
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A robust and scalable API for product management in e-commerce systems
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: E-commerce Product API
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all products, sorted by creation date in descending order (newest first)
      produces:
      - application/json
      parameters:
        - in: query
          name: page
          type: integer
          description: Page number (starts from 1)
          required: false
          default: 1
        - in: query
          name: size
          type: integer
          description: Number of products per page
          required: false
          default: 10
      responses:
        "200":
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/models.Product'
              pagination:
                type: object
                properties:
                  current_page:
                    type: integer
                    example: 1
                  page_size:
                    type: integer
                    example: 10
                  total_items:
                    type: integer
                    example: 100
                  total_pages:
                    type: integer
                    example: 10
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Creates a new product with the specified details
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a product with the specified ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Retrieves a product with the specified ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Updates an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update a product
      tags:
      - products
  /products/batch:
    delete:
      consumes:
      - application/json
      description: Deletes multiple products in a single request by their IDs. Returns
        results of deletion operations.
      parameters:
      - description: Array of product IDs to delete
        in: body
        name: productIDs
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Map of product IDs to deletion status
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid JSON data
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: One or more products not found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Batch delete multiple products simultaneously
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Creates multiple products simultaneously in a single request
      parameters:
      - description: Array of products to create
        in: body
        name: products
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Product'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Array of created products
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "400":
          description: Invalid JSON data
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Create multiple products in bulk
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Updates multiple products in a single request. All products must
        exist and contain valid data.
      parameters:
      - description: Array of products to update with their IDs and new data
        in: body
        name: products
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Product'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Array of updated products
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "400":
          description: Invalid JSON data or validation errors
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: One or more products not found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Batch update multiple products simultaneously
      tags:
      - products
schemes:
- http
- ws
swagger: "2.0"
